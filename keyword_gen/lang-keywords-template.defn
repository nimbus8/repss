/*
 REPSS
 Copyright (C) 2012  Khalique Williams

 This file is part of REPSS.

 REPSS is free software: you can redistribute it and/or modify
 it under the terms of the   GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 REPSS is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with REPSS.  If not, see <http://www.gnu.org/licenses/>.
 */

//read in keywords-list.defn
//+ file should be organized, by line:
//
//    + IKeywords:obj {
//         +_keyword-name_{ type, ... }
//         +path { '../src/lib/includes/GeneratedIRecognizedKeywords.hpp' }      
//    }
//
//           or
//           --
//
// + RecognizedKeywordsFile:file {
//     + IKeywords:obj {
//         +_keyword-name_ { type, ... }
//     }
//
//     +path { '../src/lib/includes/GeneratedIRecognizedKeywords.hpp' }
// }
//+  'keyword-name' alone is sufficient for Lexer, the details implemented by language writer
//+  'type' is relevant to Grammar module (the 'keyword-name' is too).

//goes into filesystem of repss and replaces certain files/interfaces with new ones

/*
    Template for generated file:


        _gen_recognizedKeywords.hpp
        or autogenerated/recognizedKeywords.hpp

            class IKeywords
            {
            private:
                virtual ~IKeywords() = 0;
            protected:
                class KeywordsData
                {
                private:
                    const size_t _size = 12;
                    const AbstrKeywordDefn keywords[_size] =
                        /\
                        ||
*/
                 /* AbstrKeywordDefn is abstract w/ instance fields defined
                     AbstrKeywordDefn inherits from interface IKeywordDefn,
                       LexerKeywordDefn and GrammarKeywordDefn should also inherit
                       from IKeywordDefn. */
/*
                        {
                          AbstrKeywordDefn{ "scope", GrammarType_t::VARIABLE },
                          AbstrKeywordDefn{ "general_end", GrammartType_t::TERMINAL }
                        }
                public:
                    KeywordsData()
                    {

                    }

                    size_t getSize() { return _size; }
                    IGrammarKeywordDefn getAt(size_t index)
                    {
                        ....
                    }
                };

                const KeywordsData _data;
            public:
                template<T>
                //this way both lexer and grammar always have access to same set of keywords
                //and can restrict usage of uneeded parts in the set etc -- to be taken care.
                //in subclasses LexerKeywords, GrammarKeywords

                virtual const std::vector<T> getKeywords();
            };
*/

