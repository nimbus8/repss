== REPSS ==

(input-stream): 
a	b	c	d	e	f	

(output-stream): 
d	f	h	j	l	n	

./repss
abc==abc: 0 len(a): 3
==%%: -1
%==%%: -1
woot==hoot: -1, len(a):4 len(b):4
%%==%%: 0
%!==%%: -1
%%==%%: 0
%%==%%: 0
foo1: 1, foo2: 2
CREATING end state mapping: endStateToName=(8=>repetition)

Successfully appended 'named_iteration' to tentative end state name => 'repetition.named_iteration'









Successfully constructed name=x:y
Construction Test: (,k
a=1:10 H
`ÿ, 11)
Starting state: 9, startingDfaId: 9
search for a beginning: (state, seq,c): 9, 0, k
search for a beginning: (state, seq,c): 9, 1, 

search for a beginning: (state, seq,c): 9, 2, a
isAcceptingNode called: id=(10)
isAcceptingNode RESPONSE false
'a' - DfaNode(9) ~ stateAndInput=(state, seq,c): (10, 3, =)
isAcceptingNode called: id=(11)
isAcceptingNode RESPONSE false
'=' - DfaNode(10) ~ stateAndInput=(state, seq,c): (11, 4, 1)
isAcceptingNode called: id=(12)
isAcceptingNode RESPONSE false
'1' - DfaNode(11) ~ stateAndInput=(state, seq,c): (12, 5, :)
isAcceptingNode called: id=(14)
isAcceptingNode RESPONSE false
':' - DfaNode(12) ~ stateAndInput=(state, seq,c): (14, 6, 1)
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
'1' - DfaNode(14) ~ stateAndInput=(state, seq,c): (15, 7, 0)
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
'0' - DfaNode(15) ~ stateAndInput=(state, seq,c): (15, 8,  )
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
found word!word=(repetition.named_iteration)



Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
setting member (2) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]







Constructed [rep] var=1:10
Construction Test: (,fyi/[rep] a=2:81 , 17)
Starting state: 1, startingDfaId: 1
search for a beginning: (state, seq,c): 1, 0, f
search for a beginning: (state, seq,c): 1, 1, y
search for a beginning: (state, seq,c): 1, 2, i
search for a beginning: (state, seq,c): 1, 3, /
isAcceptingNode called: id=(2)
isAcceptingNode RESPONSE false
'/' - DfaNode(1) ~ stateAndInput=(state, seq,c): (2, 4, [)
isAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
'[' - DfaNode(2) ~ stateAndInput=(state, seq,c): (3, 5, r)
isAcceptingNode called: id=(4)
isAcceptingNode RESPONSE false
'r' - DfaNode(3) ~ stateAndInput=(state, seq,c): (4, 6, e)
isAcceptingNode called: id=(5)
isAcceptingNode RESPONSE false
'e' - DfaNode(4) ~ stateAndInput=(state, seq,c): (5, 7, p)
isAcceptingNode called: id=(6)
isAcceptingNode RESPONSE false
'p' - DfaNode(5) ~ stateAndInput=(state, seq,c): (6, 8, ])
isAcceptingNode called: id=(7)
isAcceptingNode RESPONSE false
']' - DfaNode(6) ~ stateAndInput=(state, seq,c): (7, 9,  )
isAcceptingNode called: id=(9)
isAcceptingNode RESPONSE false
' ' - DfaNode(7) ~ stateAndInput=(state, seq,c): (9, 10, a)
isAcceptingNode called: id=(10)
isAcceptingNode RESPONSE false
'a' - DfaNode(9) ~ stateAndInput=(state, seq,c): (10, 11, =)
isAcceptingNode called: id=(11)
isAcceptingNode RESPONSE false
'=' - DfaNode(10) ~ stateAndInput=(state, seq,c): (11, 12, 2)
isAcceptingNode called: id=(12)
isAcceptingNode RESPONSE false
'2' - DfaNode(11) ~ stateAndInput=(state, seq,c): (12, 13, :)
isAcceptingNode called: id=(14)
isAcceptingNode RESPONSE false
':' - DfaNode(12) ~ stateAndInput=(state, seq,c): (14, 14, 8)
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
'8' - DfaNode(14) ~ stateAndInput=(state, seq,c): (15, 15, 1)
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
'1' - DfaNode(15) ~ stateAndInput=(state, seq,c): (15, 16,  )
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
found word!word=(repetition.named_iteration)



Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
CREATING end state mapping: endStateToName=(24=>scope)








Constructed SCO
Construction Test: (,k
/[sco] Hà[ˆ, 10)
Starting state: 17, startingDfaId: 17
search for a beginning: (state, seq,c): 17, 0, k
search for a beginning: (state, seq,c): 17, 1, 

search for a beginning: (state, seq,c): 17, 2, /
isAcceptingNode called: id=(18)
isAcceptingNode RESPONSE false
'/' - DfaNode(17) ~ stateAndInput=(state, seq,c): (18, 3, [)
isAcceptingNode called: id=(19)
isAcceptingNode RESPONSE false
'[' - DfaNode(18) ~ stateAndInput=(state, seq,c): (19, 4, s)
isAcceptingNode called: id=(20)
isAcceptingNode RESPONSE false
's' - DfaNode(19) ~ stateAndInput=(state, seq,c): (20, 5, c)
isAcceptingNode called: id=(21)
isAcceptingNode RESPONSE false
'c' - DfaNode(20) ~ stateAndInput=(state, seq,c): (21, 6, o)
isAcceptingNode called: id=(22)
isAcceptingNode RESPONSE false
'o' - DfaNode(21) ~ stateAndInput=(state, seq,c): (22, 7, ])
isAcceptingNode called: id=(23)
isAcceptingNode RESPONSE false
']' - DfaNode(22) ~ stateAndInput=(state, seq,c): (23, 8,  )
isAcceptingNode called: id=(24)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(24)
isAcceptingNode RESPONSE: true
found word!word=(scope)



Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
CREATING end state mapping: endStateToName=(29=>general_end)




Constructed [/] 
Construction Test: (,fyi/[rep]HH/[/], 15)
Starting state: 25, startingDfaId: 25
search for a beginning: (state, seq,c): 25, 0, f
search for a beginning: (state, seq,c): 25, 1, y
search for a beginning: (state, seq,c): 25, 2, i
search for a beginning: (state, seq,c): 25, 3, /
isAcceptingNode called: id=(26)
isAcceptingNode RESPONSE false
'/' - DfaNode(25) ~ stateAndInput=(state, seq,c): (26, 4, [)
isAcceptingNode called: id=(27)
isAcceptingNode RESPONSE false
'[' - DfaNode(26) ~ stateAndInput=(state, seq,c): (27, 5, r)
'r' - DfaNode(25) ~ stateAndInput=(state, seq,c): (25, 6, e)
'e' - DfaNode(25) ~ stateAndInput=(state, seq,c): (25, 7, p)
'p' - DfaNode(25) ~ stateAndInput=(state, seq,c): (25, 8, ])
']' - DfaNode(25) ~ stateAndInput=(state, seq,c): (25, 9, H)
'H' - DfaNode(25) ~ stateAndInput=(state, seq,c): (25, 10, H)
'H' - DfaNode(25) ~ stateAndInput=(state, seq,c): (25, 11, /)
isAcceptingNode called: id=(26)
isAcceptingNode RESPONSE false
'/' - DfaNode(25) ~ stateAndInput=(state, seq,c): (26, 12, [)
isAcceptingNode called: id=(27)
isAcceptingNode RESPONSE false
'[' - DfaNode(26) ~ stateAndInput=(state, seq,c): (27, 13, /)
isAcceptingNode called: id=(28)
isAcceptingNode RESPONSE false
'/' - DfaNode(27) ~ stateAndInput=(state, seq,c): (28, 14, ])
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
found word!word=(general_end)



Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
deleting array with delete[]
Pushing back dfa to mergeDfas parameter: dfa(1)
Pushing back dfa to mergeDfas parameter: dfa(17)
Pushing back dfa to mergeDfas parameter: dfa(25)

Merging dfas to one, words size: 3
0x7f885be001a0
1
is word null?? false
Getting transitions for word
Adding job to job Queue
0x7f885be00d70
17
is word null?? false
Getting transitions for word
Adding job to job Queue
0x7f885be01240
25
is word null?? false
Getting transitions for word
Adding job to job Queue
Merge Process: 3 jobs total
Processing Job line #0
There are 1 in job vector. Processing Job #1
is there nextDfaPtr? no0x0
::adding transition([1, '/']->2) to dfa(30)
Processing Job line #1
There are 1 in job vector. Processing Job #2
is there nextDfaPtr? yes0x7f885be001d0
Couldn't find an opening, pushing back job
There are 1 in job vector. Processing Job #2
is there nextDfaPtr? yes0x7f885be00000
Couldn't find an opening, pushing back job
There are 1 in job vector. Processing Job #2
is there nextDfaPtr? no0x0
::adding transition([19, 's']->20) to dfa(3)
Processing Job line #2
There are 1 in job vector. Processing Job #3
is there nextDfaPtr? yes0x7f885be001d0
Couldn't find an opening, pushing back job
There are 1 in job vector. Processing Job #3
is there nextDfaPtr? yes0x7f885be00000
Couldn't find an opening, pushing back job
There are 1 in job vector. Processing Job #3
is there nextDfaPtr? no0x0
::adding transition([27, '/']->28) to dfa(3)
Finished jobs!

Starting Merged Representation Test
-----------------------------------
4679
(id, input-idx, input): 30, 0, 5
(id, input-idx, input): 30, 1, /
break
isAcceptingNode called: id=(2)
isAcceptingNode RESPONSE false
(id, input-idx, input): 2, 2, /
(id, input-idx, input): 30, 2, /
isAcceptingNode called: id=(2)
isAcceptingNode RESPONSE false
(id, input-idx, input): 2, 3, [
isAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
(id, input-idx, input): 3, 4, /
isAcceptingNode called: id=(28)
isAcceptingNode RESPONSE false
(id, input-idx, input): 28, 5, ]
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
done search while loop in isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
found word! word=(general_end)

(id, input-idx, input): 30, 0, b
(id, input-idx, input): 30, 1, /
break
isAcceptingNode called: id=(2)
isAcceptingNode RESPONSE false
(id, input-idx, input): 2, 2, [
isAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
(id, input-idx, input): 3, 3, s
isAcceptingNode called: id=(20)
isAcceptingNode RESPONSE false
(id, input-idx, input): 20, 4, c
isAcceptingNode called: id=(21)
isAcceptingNode RESPONSE false
(id, input-idx, input): 21, 5, o
isAcceptingNode called: id=(22)
isAcceptingNode RESPONSE false
(id, input-idx, input): 22, 6, ]
isAcceptingNode called: id=(23)
isAcceptingNode RESPONSE false
(id, input-idx, input): 23, 7,  
isAcceptingNode called: id=(24)
isAcceptingNode RESPONSE: true
done search while loop in isAcceptingNode called: id=(24)
isAcceptingNode RESPONSE: true
found word! word=(scope)

(id, input-idx, input): 30, 0, f
(id, input-idx, input): 30, 1, y
(id, input-idx, input): 30, 2, i
(id, input-idx, input): 30, 3, /
break
isAcceptingNode called: id=(2)
isAcceptingNode RESPONSE false
(id, input-idx, input): 2, 4, [
isAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
(id, input-idx, input): 3, 5, r
isAcceptingNode called: id=(4)
isAcceptingNode RESPONSE false
(id, input-idx, input): 4, 6, e
isAcceptingNode called: id=(5)
isAcceptingNode RESPONSE false
(id, input-idx, input): 5, 7, p
isAcceptingNode called: id=(6)
isAcceptingNode RESPONSE false
(id, input-idx, input): 6, 8, ]
isAcceptingNode called: id=(7)
isAcceptingNode RESPONSE false
(id, input-idx, input): 7, 9,  
isAcceptingNode called: id=(9)
isAcceptingNode RESPONSE false
(id, input-idx, input): 9, 10, a
isAcceptingNode called: id=(10)
isAcceptingNode RESPONSE false
(id, input-idx, input): 10, 11, =
isAcceptingNode called: id=(11)
isAcceptingNode RESPONSE false
(id, input-idx, input): 11, 12, 2
isAcceptingNode called: id=(12)
isAcceptingNode RESPONSE false
(id, input-idx, input): 12, 13, :
isAcceptingNode called: id=(14)
isAcceptingNode RESPONSE false
(id, input-idx, input): 14, 14, 8
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
(id, input-idx, input): 15, 15, 1
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
(id, input-idx, input): 15, 16, 

isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
done search while loop in isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
found word! word=(repetition.named_iteration)

Merged Word Repr Test: done ALL search while loops in 0.832 milliseconds

Merge Test SUCCEEDED!


Constructing ScanWords
......................

Popped back from 'nodesToBeInitd': node{ id=(30)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(2)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(3)}
	isRangedTransition=false
	isRangedTransition=false
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(4)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(5)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(6)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(7)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(9)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(10)}
	isRangedTransition=false
	isRangedTransition=true
	Successfully set value for index in _RangedTransitionsByCategory
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(11)}
	isRangedTransition=true
	Successfully set value for index in _RangedTransitionsByCategory
	isRangedTransition=true
	Successfully set value for index in _RangedTransitionsByCategory
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(12)}
	isRangedTransition=false
	isRangedTransition=true
	Successfully set value for index in _RangedTransitionsByCategory
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(14)}
	isRangedTransition=true
	Successfully set value for index in _RangedTransitionsByCategory
	isRangedTransition=true
	Successfully set value for index in _RangedTransitionsByCategory
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(15)}
	isRangedTransition=false
	isRangedTransition=false
	isRangedTransition=true
	Successfully set value for index in _RangedTransitionsByCategory
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(8)}
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(16)}
	isRangedTransition=false
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(13)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(20)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(21)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(22)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(23)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(24)}
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(28)}
	isRangedTransition=false
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Popped back from 'nodesToBeInitd': node{ id=(29)}
Copying new entries in 'nodesToBeIntd' to 'existingScanWordNodes'
Beginning ScanWord Test

Starting Scan Words Test
------------------------
6747
(id, input-idx, input): 30, 0, 5
(id, input-idx, input): 30, 1, /
break
isAcceptingNode called: id=(2)
isAcceptingNode RESPONSE false
(id, input-idx, input): 2, 2, /
(id, input-idx, input): 30, 2, /
isAcceptingNode called: id=(2)
isAcceptingNode RESPONSE false
(id, input-idx, input): 2, 3, [
isAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
(id, input-idx, input): 3, 4, /
isAcceptingNode called: id=(28)
isAcceptingNode RESPONSE false
(id, input-idx, input): 28, 5, ]
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
done search while loop
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
found word! word=(general_end)

(id, input-idx, input): 30, 0, b
(id, input-idx, input): 30, 1, /
break
isAcceptingNode called: id=(2)
isAcceptingNode RESPONSE false
(id, input-idx, input): 2, 2, [
isAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
(id, input-idx, input): 3, 3, s
isAcceptingNode called: id=(20)
isAcceptingNode RESPONSE false
(id, input-idx, input): 20, 4, c
isAcceptingNode called: id=(21)
isAcceptingNode RESPONSE false
(id, input-idx, input): 21, 5, o
isAcceptingNode called: id=(22)
isAcceptingNode RESPONSE false
(id, input-idx, input): 22, 6, ]
isAcceptingNode called: id=(23)
isAcceptingNode RESPONSE false
(id, input-idx, input): 23, 7,  
isAcceptingNode called: id=(24)
isAcceptingNode RESPONSE: true
done search while loop
isAcceptingNode called: id=(24)
isAcceptingNode RESPONSE: true
found word! word=(scope)

(id, input-idx, input): 30, 0, f
(id, input-idx, input): 30, 1, y
(id, input-idx, input): 30, 2, i
(id, input-idx, input): 30, 3, /
break
isAcceptingNode called: id=(2)
isAcceptingNode RESPONSE false
(id, input-idx, input): 2, 4, [
isAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
(id, input-idx, input): 3, 5, r
isAcceptingNode called: id=(4)
isAcceptingNode RESPONSE false
(id, input-idx, input): 4, 6, e
isAcceptingNode called: id=(5)
isAcceptingNode RESPONSE false
(id, input-idx, input): 5, 7, p
isAcceptingNode called: id=(6)
isAcceptingNode RESPONSE false
(id, input-idx, input): 6, 8, ]
isAcceptingNode called: id=(7)
isAcceptingNode RESPONSE false
(id, input-idx, input): 7, 9,  
isAcceptingNode called: id=(9)
isAcceptingNode RESPONSE false
(id, input-idx, input): 9, 10, a
isAcceptingNode called: id=(10)
isAcceptingNode RESPONSE false
(id, input-idx, input): 10, 11, =
isAcceptingNode called: id=(11)
isAcceptingNode RESPONSE false
(id, input-idx, input): 11, 12, 2
isAcceptingNode called: id=(12)
isAcceptingNode RESPONSE false
(id, input-idx, input): 12, 13, :
isAcceptingNode called: id=(14)
isAcceptingNode RESPONSE false
(id, input-idx, input): 14, 14, 1
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
(id, input-idx, input): 15, 15, 0
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
(id, input-idx, input): 15, 16, 

isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
done search while loop
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
found word! word=(repetition.named_iteration)

ScanWordTest: done ALL search while loops in 0.520 milliseconds

--about to return 0
Done Scan Word Test - result:0
LexerManager:: First ScanWordNode (id: 30)
src/deps/includes/lexer/lexer_manager.hpp 78:Initializing lexer data proxy
initLexerDataProxyImpl:: just about to initialize lexer data proxy with const cast
src/deps/includes/lexer/lexer_manager.hpp 83:initialized lexer data proxy successfully
src/deps/includes/lexer/lexer_manager.hpp 87:got lexer data proxy from context
getRecognizedKeywords()
getScanWordTransitionMap()
src/deps/includes/lexer/lexer_manager.hpp 93: finished intializing lexer_manager
src/repss.cpp 205:past lexer manager creation.
src/Scanner.cpp 47:Starting Scanner::processFile
getDfaManager()
getScanWordTransitionMap()
cleared ArraygetRecognizedKeywords()
7365
cleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(4)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(5)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(6)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
cleared Arraycleared Arraycleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(28)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
cleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(4)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(5)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(6)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(7)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(9)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(10)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(11)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(13)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(14)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
cleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(28)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
cleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(4)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(5)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(6)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(7)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(9)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(10)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(11)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(12)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(12)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(14)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
cleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(28)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
cleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(20)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(21)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(22)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(23)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(24)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(24)
isAcceptingNode RESPONSE: true
cleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(4)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(5)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(6)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(7)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(9)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
cleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(28)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
cleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(4)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(5)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(6)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(7)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(9)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(10)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(11)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(12)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(12)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(14)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(15)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(8)
isAcceptingNode RESPONSE: true
cleared Arraycleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(28)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
cleared Arraycleared ArrayisAcceptingNode called: id=(3)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(28)
isAcceptingNode RESPONSE false
src/Scanner.cpp 96:currentPlace != startPlace && NOT ACCEPTING NODE && NOT NEWLINE
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
isAcceptingNode called: id=(29)
isAcceptingNode RESPONSE: true
cleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Arraycleared Array

Scanning: done scanning in 3.242 milliseconds
CtxMan TypedContext <> setAnnotatedData
Setting annotated data with vector size = 103

Printing Annotated Data
CtxMan TypedContext <> printAnnotatedData
{data_line:/*}
{data_line: REPSS}
{data_line: Copyright (C) 2012  Khalique Williams}
{data_line:empty_str}
{data_line: This file is part of REPSS.}
{data_line:empty_str}
{data_line: REPSS is free software: you can redistribute it and/or modify}
{data_line: it under the terms of the   GNU General Public License as published by}
{data_line: the Free Software Foundation, either version 3 of the License, or}
{data_line: (at your option) any later version.}
{data_line:empty_str}
{data_line: REPSS is distributed in the hope that it will be useful,}
{data_line: but WITHOUT ANY WARRANTY; without even the implied warranty of}
{data_line: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the}
{data_line: GNU General Public License for more details.}
{data_line:empty_str}
{data_line: You should have received a copy of the GNU General Public License}
{data_line: along with REPSS.  If not, see <http://www.gnu.org/licenses/>.}
{data_line: */}
{data_line:empty_str}
{data_line:/[rep(s)]  }
{data_line:empty_str}
{data_line:lowly rolly polly olly.}
{data_line:empty_str}
{key_word:general_end=<'/[/]'>}
{data_line:empty_str}
{data_line:empty_str}
{data_line:I assure you not nearly a week has passed.}
{data_line:Not since men in cardigans sat about a fire consuming roaches.}
{data_line:The fire itself was unremarkable. All that felt it's warmth thought it unremarkable.}
{data_line:Fire to them merely a tool necessary to their occupations; to be jettisoned, lampooned, and left on it's own -}
{data_line:to simmer - ensuring no seed cwould ever prosper in it's wake etcetera etc. }
{data_line:A means to a ruinous end essentially. Therein that moment, its purpose was as equally self-serving. }
{data_line:The flames danced in and about the dark pits of their eyes (the pupils) as the men devoured roach after roach}
{data_line:one at a time, (like) a true group of dining philosophers - a joke often repeated. }
{data_line:That night roaches were on the menu, and these roaches, I tell you, were no ordinary roaches.}
{data_line:Few roaches can be considered ordinary to begin, but we recognize these roaches by the attention that they command}
{data_line:- the delicacy with which they're handled. For many there exists no greater horror...for these men that horror was ecstacy. }
{data_line:I nor they themselves can explain just }
{key_word:%}
{data_line:why}
{key_word:%}
{data_line: exactly, one gets that deep feeling of revulsion}
{data_line:- an involuntary reflex if you will - that causes [the] blood to flee the part of the brain that gives us calm, -}
{data_line:that small peice of mind. Encoded (indel)lably in our biology, no doubt.  }
{key_word:repetition.named_iteration=<'/[rep] a=0:8 '>}
{data_line:f ye fo fum fout }
{key_word:general_end=<'/[/]'>}
{data_line:empty_str}
{data_line:It's worth noting the extent to which these cardigan clad men came and went in pursuit of the so called "rarified breeds" }
{data_line:- it bordered on insanity. That same vigor with which we are all familiar, interestingly enough, -}
{data_line:has (actually) tempered relations between neighbouring states and provinces the world over.}
{key_word:repetition.named_iteration=<'/[rep] a=10:1 '>}
{data_line:empty_str}
{data_line:second half }
{key_word:general_end=<'/[/]'>}
{data_line:empty_str}
{data_line:Those who cared - the *artisans*, the *connaisseurs*, *the politicians* - were never so interested in their local varieties.}
{data_line:The stench of familiarity so great, even amoungst the most enthused, that governments and private contractors -}
{data_line:chartered steamboats, military jets, and lunar space shuttles to be packed to the tilt. }
{data_line:The roaches were transported from the far reaches of the congo to the dirty underground basements }
{key_word:%}
{data_line:where the cardigan clad men would congregate}
{key_word:%}
{data_line:, often sporting beaded masks in a lazy attempt to hide their }
{key_word:%}
{data_line:identities}
{key_word:%}
{data_line: [1]. }
{data_line:Needless to say the }
{key_word:%}
{data_line:boatsmen}
{key_word:%}
{data_line:, the }
{key_word:%}
{data_line:pilots}
{key_word:%}
{data_line:, and the }
{key_word:%}
{data_line:astronauts}
{key_word:%}
{data_line: were never in such precarious situations }
{data_line:- every man/woman/andindivudual received a gold brick for every roach they kept their hands off of.}
{data_line:All went home poorer than they left. But you know in this world there are much more important things...}
{key_word:scope=<'/[sco] '>}
{data_line:empty_str}
{data_line:/[rep]  }
{data_line:        this isnt it.}
{key_word:general_end=<'/[/]'>}
{data_line:empty_str}
{key_word:repetition.named_iteration=<'/[rep] a=21:8020 '>}
{data_line:empty_str}
{data_line:        that is all.}
{key_word:general_end=<'/[/]'>}
{data_line:empty_str}
{key_word:general_end=<'/[/]'>}
{data_line:empty_str}
{data_line:empty_str}
{data_line:Unbelievable eh? That's adawe fo you! The innocent stay Away from the madness.}
{data_line:empty_str}
{data_line:Footnte:}
{data_line:[1] In Belgium every second sunday is rarely referred to as "nuit de pieds nu".}
{data_line:     (one might hear colloquialisms of the same humour spoken elsewhere of similar events)}

Finished printing anotated data
Destroying Dfa id(0x7f885be01240) the RIGHT way.
Destroying Dfa id(0x7f885be01270) the RIGHT way.
Destroying Dfa id(0x7f885be012a0) the RIGHT way.
Destroying Dfa id(0x7f885be012d0) the RIGHT way.
Destroying Dfa id(0x7f885be01360) the RIGHT way.
Destructor for AggregateDfasAndDelete called
Destructor for AggregatePtrsAndDelete called
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
setting member (2) to null
setting member (3) to null
setting member (4) to null
deleting array with delete[]
Deleted one lexer_word successfully
Destroying Dfa Transition id(0x7f885be000b0) the RIGHT way.
Destroying Dfa Transition id(0x7f885be005e0) the RIGHT way.
Destroying Dfa Transition id(0x7f885be01030) the RIGHT way.
Destroying Dfa Transition id(0x7f885be00380) the RIGHT way.
Destructor for AggregateDfaTransitionsAndDelete called
Destructor for AggregatePtrsAndDelete called
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
setting member (2) to null
setting member (3) to null
deleting array with delete[]
Deleted a group of DfaTransitions successfully
Destroying Dfa id(0x7f885be00d70) the RIGHT way.
Destroying Dfa id(0x7f885be00ea0) the RIGHT way.
Destroying Dfa id(0x7f885be00ed0) the RIGHT way.
Destroying Dfa id(0x7f885be00f00) the RIGHT way.
Destroying Dfa id(0x7f885be00f30) the RIGHT way.
Destroying Dfa id(0x7f885be00f60) the RIGHT way.
Destroying Dfa id(0x7f885be00f90) the RIGHT way.
Destructor for AggregateDfasAndDelete called
Destructor for AggregatePtrsAndDelete called
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
setting member (2) to null
setting member (3) to null
setting member (4) to null
setting member (5) to null
setting member (6) to null
deleting array with delete[]
Deleted one lexer_word successfully
Destroying Dfa Transition id(0x7f885be00620) the RIGHT way.
Destroying Dfa Transition id(0x7f885be00bd0) the RIGHT way.
Destroying Dfa Transition id(0x7f885be00c10) the RIGHT way.
Destroying Dfa Transition id(0x7f885be00c50) the RIGHT way.
Destroying Dfa Transition id(0x7f885be00c90) the RIGHT way.
Destroying Dfa Transition id(0x7f885be00bb0) the RIGHT way.
Destructor for AggregateDfaTransitionsAndDelete called
Destructor for AggregatePtrsAndDelete called
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
setting member (2) to null
setting member (3) to null
setting member (4) to null
setting member (5) to null
deleting array with delete[]
Deleted a group of DfaTransitions successfully
Destroying Dfa id(0x7f885be001a0) the RIGHT way.
Destroying Dfa id(0x7f885be001d0) the RIGHT way.
Destroying Dfa id(0x7f885be00000) the RIGHT way.
Destroying Dfa id(0x7f885be00050) the RIGHT way.
Destroying Dfa id(0x7f885be00080) the RIGHT way.
Destroying Dfa id(0x7f885be00240) the RIGHT way.
Destroying Dfa id(0x7f885be00270) the RIGHT way.
Destructor for AggregateDfasAndDelete called
Destructor for AggregatePtrsAndDelete called
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
setting member (2) to null
setting member (3) to null
setting member (4) to null
setting member (5) to null
setting member (6) to null
deleting array with delete[]
Deleted one lexer_word successfully
Destroying Dfa Transition id(0x7f885be006a0) the RIGHT way.
Destroying Dfa Transition id(0x7f885be00570) the RIGHT way.
Destroying Dfa Transition id(0x7f885be00730) the RIGHT way.
Destroying Dfa Transition id(0x7f885be00790) the RIGHT way.
Destroying Dfa Transition id(0x7f885be007f0) the RIGHT way.
Destroying Dfa Transition id(0x7f885be00830) the RIGHT way.
Destroying Dfa Transition id(0x7f885be008d0) the RIGHT way.
Destructor for AggregateDfaTransitionsAndDelete called
Destructor for AggregatePtrsAndDelete called
Desructor for AggregateAndApplyFuncBase called
setting member (0) to null
setting member (1) to null
setting member (2) to null
setting member (3) to null
setting member (4) to null
setting member (5) to null
setting member (6) to null
deleting array with delete[]
Deleted a group of DfaTransitions successfully
Sucessfully deleted lexer word constructor!
