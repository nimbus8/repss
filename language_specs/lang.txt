/*
 REPSS
 Copyright (C) 2012  Khalique Williams

 This file is part of REPSS.

 REPSS is free software: you can redistribute it and/or modify
 it under the terms of the   GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 REPSS is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with REPSS.  If not, see <http://www.gnu.org/licenses/>.
 */

@@ Keywords That Can Be Embedded In Other Keywords @@
@@   Note: the EMBEDDED value is 'symbolic', because processing of the functionName is positional atm @@
@@          , to avoid treating EbeddedKeywords and Keywords much differently in read phase. Should   @@
@@          eventually do this and eliminating any 'weirdness' from the structure of this file - for  @@
@@          for instance here 'path' decl. is irrelevant(and empty) but if not present will draw an   @@
@@          error.                                                                                    @@
EmbeddedKeywords:functions {
    @@ Done Already @@
      @@ rename to named_list_iteration
      +named_list_iteration { EMBEDDED, NamedListIteration }
      +named_iteration { EMBEDDED, NamedIteration }
     
      +andJoin { EMBEDDED, AndJoin }
    +path { }
} @@ to implement @@ countless_named_iteration

Keywords:obj-collection {
    +elementName { Keyword }

    @@ Done Already @@
    +reps.named_iteration { VARIABLE, Keyword_REPS_withNamedIteration }
    +scope { VARIABLE, SquareBracketReps }
    +alternation.andJoin { TERMINAL, AlterationAndJoin }
    +alternation { TERMINAL, Alteration }
    +evaluation { TERMINAL, Keyword_eval }
    +general_end { CLOSURE, End }
    +reps.named_list_iteration { VARIABLE, Keyword_REPS_withNamedListIteration }

    +path { src/lib/includes/Genrtd_Keywords.hpp }
}  @@ to implement @@ joingAlteration, reps.countless_named_iteration, nestAlteration(not sure at all how hard this will be)

